@model WorldForge.Web.Models.ViewModels.CharacterDetailsViewModel

@{
    ViewData["Title"] = Model.Name;
    Layout = "~/Views/Shared/_Layout.cshtml";

    var backgroundImage = Model.Books?.FirstOrDefault()?.CoverImageUrl;
    var fallbackImage = Url.Content("~/images/default-cover.png");
    var headerImage = string.IsNullOrWhiteSpace(backgroundImage) ? fallbackImage : Url.Content(backgroundImage);
    var characterImage = string.IsNullOrWhiteSpace(Model.CharacterImageUrl)
        ? Url.Content("~/images/default-character.png")
        : Url.Content(Model.CharacterImageUrl);
}

<!-- Top Banner with Book Cover -->
<div class="full-width-banner" style="background-image: url('@headerImage'); background-size: cover; background-position: center;">
    <div class="full-width-banner text-white text-center py-5" style="background-color: rgba(0,0,0,0.15);">
        <h1 class="display-4 fw-bold">@Model.Name</h1>
        @if (Model.Books != null && Model.Books.Any())
        {
            <p class="lead">
                Appears in:
                @foreach (var book in Model.Books)
                {
                    <span class="badge bg-info text-dark mx-1">@book.Title</span>
                }
            </p>
        }
    </div>
</div>

<!-- Main Content -->
<div class="container mt-5">
    <div class="row">
        <!-- Character Image -->
        <div class="col-md-3 text-center">
            <img src="@characterImage" alt="@Model.Name" class="img-fluid rounded shadow" style="max-height: 400px; object-fit: cover;" />
            <!-- Trait Drop Zone -->
            <div id="traitDropZone" class="mt-4 p-3 bg-dark bg-opacity-50 border border-info rounded shadow-sm text-light text-center"
                 style="min-height: 100px; cursor: pointer; display: none;">
                <p class="mb-0">🧬 Drag traits here to assign</p>
            </div>
            <button id="toggleTraitPanel"
                    class="btn btn-outline-info w-100"
                    style="max-width: 90%; margin-top: 10px;">
                🧬 Assign Trait
            </button>
        </div>

        <!-- Character Info -->
        <div class="col-md-9">
            <h4 class="fw-bold mb-3">Character Information</h4>

            <dl class="row">
                <dt class="col-sm-3">Gender</dt>
                <dd class="col-sm-9">@Model.Gender</dd>

                <dt class="col-sm-3">Race</dt>
                <dd class="col-sm-9">@Model.Race</dd>

                <dt class="col-sm-3">Role</dt>
                <dd class="col-sm-9">@Model.Role</dd>

                <dt class="col-sm-3">Status</dt>
                <dd class="col-sm-9">@Model.Status</dd>
            </dl>

            <h5 class="mt-4">Biography</h5>
            <p class="lead">@Model.Description</p>

            @if (!string.IsNullOrWhiteSpace(Model.Backstory))
            {
                <h5 class="mt-4">Backstory</h5>
                <p>@Model.Backstory</p>
            }

            @if (Model.CharacterTraits != null && Model.CharacterTraits.Any())
            {
                <h5 class="mt-4">Traits</h5>
                <div class="row g-3">
                    @foreach (var ct in Model.CharacterTraits)
                    {
                        <div class="col-md-6">
                            <div class="bg-dark bg-opacity-50 p-3 rounded border border-secondary shadow-sm h-100">
                                <h6 class="text-info fw-bold mb-1">@ct.Trait.Name <small class="badge bg-secondary ms-2">@ct.Trait.Type</small></h6>
                                @if (!string.IsNullOrWhiteSpace(ct.CustomDescription))
                                {
                                    <p class="text-light mb-0">@ct.CustomDescription</p>
                                }
                                else
                                {
                                    <p class="text-muted fst-italic mb-0">No description provided.</p>
                                }
                            </div>
                        </div>
                    }
                </div>
            }

            @if (Model.Books != null && Model.Books.Any())
            {
                <h5 class="mt-4">Books Featuring This Character</h5>
                <ul>
                    @foreach (var book in Model.Books)
                    {
                        <li><a asp-controller="Books" asp-action="Details" asp-route-id="@book.Id">@book.Title</a></li>
                    }
                </ul>
            }
        </div>
    </div>


    <div id="traitPanel" class="position-fixed top-0 end-0 h-100 p-4 border-start border-secondary overflow-auto"
     style="
        width: 400px;
        transform: translateX(100%);
        transition: transform 0.3s ease-in-out;
        z-index: 1040;
        background: rgba(15, 15, 15, 0.6);
        backdrop-filter: blur(12px);
        -webkit-backdrop-filter: blur(12px);
        border-left: 1px solid rgba(255, 255, 255, 0.1);
        box-shadow: -4px 0 20px rgba(0, 0, 0, 0.5);
     ">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h5 class="mb-0">Available Traits</h5>
            <button class="btn btn-sm btn-close btn-light" onclick="toggleTraitPanel()"></button>
        </div>
        <div id="traitList">
            <p class="text-muted">Loading traits...</p>
        </div>
    </div>


    <!-- Back Button -->
    <div class="mt-5">
        <a asp-action="Index" class="btn btn-outline-light">&larr; Back to Characters</a>
    </div>
</div>

@section Scripts {
    <script>
        function toggleTraitPanel() {
            const panel = document.getElementById("traitPanel");
            const dropZone = document.getElementById("traitDropZone");
            const isOpen = panel.style.transform === "translateX(0%)";
            panel.style.transform = panel.style.transform === "translateX(0%)"
                ? "translateX(100%)"
                : "translateX(0%)";
            // Toggle drop zone visibility
            if (dropZone) {
                dropZone.style.display = isOpen ? "none" : "block";
             }
        }

        document.getElementById("toggleTraitPanel").addEventListener("click", async () => {
            toggleTraitPanel();
            const res = await fetch("/Admin/Trait/GetAll");
            const html = await res.text();
            document.getElementById("traitList").innerHTML = html;
            enableDragAndDrop();
        });

        function enableDragAndDrop() {
            const traitCards = document.querySelectorAll(".trait-card");

            traitCards.forEach(card => {
                card.setAttribute("draggable", "true");

                card.addEventListener("dragstart", e => {
                    e.dataTransfer.setData("traitId", card.dataset.traitId);
                    e.dataTransfer.setData("traitName", card.dataset.traitName);
                });
            });

            const dropZone = document.getElementById("traitDropZone");

            if (!dropZone) return;

            dropZone.addEventListener("dragover", e => e.preventDefault());

            dropZone.addEventListener("drop", async e => {
                e.preventDefault();

                const traitId = e.dataTransfer.getData("traitId");
                const traitName = e.dataTransfer.getData("traitName");
                const characterId = @Model.Id;

                const customDescription = prompt(`Enter a custom description for "${traitName}" (e.g., Height: 6'2", IQ: 145):`);
                if (!customDescription || customDescription.trim() === "") return;

                const payload = { characterId, traitId, customDescription };

                const response = await fetch("/Admin/CharacterTrait/Assign", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(payload)
                });

                if (response.ok) {
                    location.reload();
                } else {
                    alert("Failed to assign trait. Please try again.");
                }
            });
        }

        function filterTraits() {
            const query = document.getElementById("traitSearch").value.toLowerCase();
            document.querySelectorAll(".trait-card").forEach(card => {
                const name = card.dataset.traitName.toLowerCase();
                const type = card.dataset.type.toLowerCase();
                card.style.display = (name.includes(query) || type.includes(query)) ? "" : "none";
            });
        }

        function sortTraits() {
            const mode = document.getElementById("sortTraits").value;
            const groups = document.querySelectorAll(".trait-group");

            groups.forEach(group => {
                const traits = Array.from(group.querySelectorAll(".trait-card"));
                traits.sort((a, b) => {
                    if (mode === "name") return a.dataset.traitName.localeCompare(b.dataset.traitName);
                    if (mode === "recent") return b.dataset.traitId - a.dataset.traitId;
                    return 0;
                });
                traits.forEach(card => group.appendChild(card));
            });
        }
    </script>
}

