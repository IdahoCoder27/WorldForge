@model WorldForge.Web.Models.ViewModels.CreateCharacterViewModel

@{
    ViewData["Title"] = "Create Character";
}

<h2 class="fw-bold mb-4">🧬 Create New Character</h2>

<form asp-action="Create" enctype="multipart/form-data">
    <div class="mb-3">
        <label asp-for="Name" class="form-label">Name</label>
        <input asp-for="Name" class="form-control" />
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Description" class="form-label">Description</label>
        <textarea asp-for="Description" class="form-control" rows="4"></textarea>
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label class="form-label">Upload Character Image</label>
        <div id="drop-zone" class="border border-secondary rounded p-4 text-center" style="cursor: pointer;">
            <span id="drop-text">📁 Drag and drop an image here, or click to browse</span>
            <input type="file" asp-for="ImageFile" class="form-control d-none" id="imageInput" />
            <img id="preview" src="#" alt="Preview" class="img-fluid mt-3 d-none rounded shadow" style="max-height: 250px;" />
        </div>
        <span asp-validation-for="ImageFile" class="text-danger"></span>
    </div>

    <button type="submit" class="btn btn-success">Create</button>
    <a asp-action="Index" class="btn btn-secondary ms-2">Cancel</a>
</form>

@section Scripts {
    <script>
        const dropZone = document.getElementById('drop-zone');
        const input = document.getElementById('imageInput');
        const preview = document.getElementById('preview');
        const dropText = document.getElementById('drop-text');

        dropZone.addEventListener('click', () => input.click());

        dropZone.addEventListener('dragover', e => {
            e.preventDefault();
            dropZone.classList.add('border-primary');
        });

        dropZone.addEventListener('dragleave', () => {
            dropZone.classList.remove('border-primary');
        });

        dropZone.addEventListener('drop', e => {
            e.preventDefault();
            dropZone.classList.remove('border-primary');

            const file = e.dataTransfer.files[0];
            input.files = e.dataTransfer.files;

            if (file) {
                const reader = new FileReader();
                reader.onload = e => {
                    preview.src = e.target.result;
                    preview.classList.remove('d-none');
                    dropText.classList.add('d-none');
                };
                reader.readAsDataURL(file);
            }
        });

        input.addEventListener('change', () => {
            const file = input.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = e => {
                    preview.src = e.target.result;
                    preview.classList.remove('d-none');
                    dropText.classList.add('d-none');
                };
                reader.readAsDataURL(file);
            }
        });
    </script>
}
