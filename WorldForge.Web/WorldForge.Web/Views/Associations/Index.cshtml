@using WorldForge.Web.Models.ViewModels
@model AssociationViewModel

@{
    ViewData["Title"] = "Manage Associations";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2 class="fw-bold">🔗 Manage Associations</h2>
</div>

<div class="row">
    <div class="col-md-8">
        <div class="row row-cols-1 row-cols-md-2 g-4" id="bookZones">
            @foreach (var book in Model.Books)
            {
                <div class="col">
                    <div class="card h-100 border-0  drop-target"
                         data-book-id="@book.Id"
                         data-book-title="@book.Title">
                        <div class="card-body">
                            <h5 class="card-title fw-bold">@book.Title</h5>
                            <div class="text-muted small">Drag characters or notes here</div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="col-md-4">
        <h5 class="fw-bold">Unlinked Characters</h5>
        <div class="list-group mb-4" id="characterPool">
            @foreach (var character in Model.UnlinkedCharacters)
            {
                <div class="list-group-item draggable-character "
                     draggable="true"
                     data-id="@character.Id"
                     data-title="@character.Name">
                    👤 @character.Name
                </div>
            }
        </div>

        <h5 class="fw-bold">Unlinked World Notes</h5>
        <div class="list-group" id="notePool">
            @foreach (var note in Model.UnlinkedWorldNotes)
            {
                <div class="list-group-item draggable-note "
                     draggable="true"
                     data-id="@note.Id"
                     data-title="@note.Title">
                    🌍 @note.Title
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let draggedItem = null;

        document.addEventListener("DOMContentLoaded", () => {
            // Setup draggable items
            document.querySelectorAll(".draggable-character, .draggable-note").forEach(el => {
                el.addEventListener("dragstart", e => {
                    draggedItem = {
                        id: el.getAttribute("data-id"),
                        type: el.classList.contains("draggable-character") ? "character" : "note",
                        title: el.getAttribute("data-title")
                    };
                    el.classList.add("dragging");
                });

                el.addEventListener("dragend", e => {
                    e.target.classList.remove("dragging");
                });
            });

            // Setup book drop targets
            document.querySelectorAll(".drop-target").forEach(target => {
                target.addEventListener("dragover", e => {
                    e.preventDefault();
                    target.classList.add("border-primary");
                });

                target.addEventListener("dragleave", () => {
                    target.classList.remove("border-primary");
                });

                target.addEventListener("drop", async e => {
                    e.preventDefault();
                    target.classList.remove("border-primary");

                    if (!draggedItem) return;

                    const bookId = target.getAttribute("data-book-id");
                    const bookTitle = target.getAttribute("data-book-title");

                    const response = await fetch('/Associations/Link', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            id: draggedItem.id,
                            bookId: bookId,
                            type: draggedItem.type
                        })
                    });

                    if (response.ok) {
                        alert(`✅ Assigned ${draggedItem.type} "${draggedItem.title}" to "${bookTitle}"`);
                        location.reload(); // Optional: replace with DOM update
                    } else {
                        const error = await response.text();
                        alert("❌ Failed to associate: " + error);
                    }

                    draggedItem = null;
                });
            });
        });
    </script>
}
